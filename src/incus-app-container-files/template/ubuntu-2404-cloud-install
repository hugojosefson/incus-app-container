#!/bin/sh
set -xe

# Type any extra commands inside this function. They will run last.
extra_commands() {
  apt-get install -y byobu neovim bash bash-completion
  update-alternatives --set vim "$(command -v nvim)"
  su - root -c byobu-enable
}

create_executable() {
  filename="$1"
  create_file "${filename}"
  chmod +x "${filename}"
}

create_file() {
  filename="$1"
  mkdir -p "$(dirname "${filename}")"
  cat >"${filename}"
}

create_file_if_not_exists() {
  filename="$1"
  if [ ! -e "${filename}" ]; then
    create_file "${filename}"
  else
    cat >/dev/null
  fi
}

enable_service() {
  name="$1"
  systemctl enable "${name}"
}

create_service() {
  name="$1"
  create_file "/etc/systemd/system/${name}.service"
  systemctl daemon-reload
  enable_service "${name}"
}

create_executable "/etc/update-motd.d/80-network" <<'EOF'
#!/bin/sh
set -e
echo "----------------------------------------------------------------------"
ip a | grep -E '(^[^ ]|\binet6? [^ ]+)'
echo "----------------------------------------------------------------------"
EOF

apt-get update
apt-get full-upgrade -y --purge --autoremove
apt-get install -y curl openssh-server inotify-tools unattended-upgrades
curl -sfSL https://get.docker.com/ | sh

appdata_dir="/appdata"
docker_compose_file="${appdata_dir}/docker-compose.yml"
create_service docker-compose <<EOF
[Unit]
Description=Docker Compose Application Service
After=docker.service
Requires=docker.service

[Service]
Environment="appdata_dir=${appdata_dir}"
Environment="docker_compose_file=${docker_compose_file}"
ExecStartPre=/bin/bash -c 'if ! /usr/bin/docker info 2>/dev/null >/dev/null; then echo "Waiting for Docker daemon to be ready..."; /usr/bin/timeout 15 sh -c "until /usr/bin/docker info 2>/dev/null >/dev/null; do sleep 1; done;"; if [[ \$? -eq 0 ]]; then echo "Docker daemon is ready"; else echo "Docker daemon is not ready"; exit 1; fi; fi'
ExecStartPre=/usr/bin/docker compose --file "\${docker_compose_file}" config --quiet
ExecStart=/usr/bin/docker compose --file "\${docker_compose_file}" up --detach --remove-orphans --pull=always --wait
ExecReload=/usr/bin/docker compose --file "\${docker_compose_file}" up --detach --remove-orphans --pull=always --wait
ExecRestartPre=/usr/bin/docker compose --file "\${docker_compose_file}" config --quiet
ExecStop=/bin/bash -c 'if [[ ! -r "\${docker_compose_file}" ]]; then systemctl stop docker; else /usr/bin/docker compose --file "\${docker_compose_file}" down; fi'
Restart=always

[Install]
WantedBy=multi-user.target
EOF

create_service docker-compose-watchdog <<EOF
[Unit]
Description=Keeps an instance of docker-compose-watchdog running

[Service]
ExecStart=/usr/bin/docker-compose-watchdog
Restart=always
KillSignal=SIGHUP
KillMode=mixed
TimeoutStopSec=5

[Install]
WantedBy=multi-user.target
EOF

create_executable "/usr/bin/docker-compose-watchdog" <<EOF
#!/bin/sh
set -e

################################################################################
# Watches the ${docker_compose_file} file for changes and reloads the
# docker-compose service when it does.
#
# This script is intended to be run by the docker-compose-watchdog service.
################################################################################

docker_compose_file="${docker_compose_file}"
inotifyd_max_wait="60"
previous_hash=""
current_hash=""
inotifyd_pid=""
shutting_down=""

handle_signal() {
  shutting_down="true"
  if [ -n "\${inotifyd_pid}" ]; then
    echo "Received signal, terminating inotifyd" >&2
    kill "\${inotifyd_pid}"
    wait "\${inotifyd_pid}" || true
  fi
  exit 0
}
trap handle_signal HUP INT TERM QUIT ABRT KILL

get_hash() {
  if ! [ -r "\${docker_compose_file}" ]; then
    echo "N/A"
  else
    sha256sum "\${docker_compose_file}" | cut -d' ' -f1
  fi
}

is_still_the_same_hash() {
  current_hash="\$(get_hash)"
  if [ "\${current_hash}" = "\${previous_hash}" ]; then
    previous_hash="\${current_hash}"
    return 0
  else
    previous_hash="\${current_hash}"
    return 1
  fi
}

has_the_file_changed() {
  ! is_still_the_same_hash
}

main() {
  while true; do
    if has_the_file_changed; then
      docker-compose-reload
      sleep 1
      continue
    fi

    if [ -r "\${docker_compose_file}" ]; then
      timeout "\${inotifyd_max_wait}" inotifyd : "\${docker_compose_file}":cew0uoDMx &
      inotifyd_pid="\$!"
      echo "Waiting up to \${inotifyd_max_wait} seconds for changes to \${docker_compose_file} in inotifyd pid \${inotifyd_pid}" >&2
      wait "\${inotifyd_pid}"
      echo "inotifyd terminated" >&2
      if [ -n "\${shutting_down}" ]; then
        echo "Breaking watch loop because we're shutting down" >&2
        break
      fi
      echo "Clearing inotifyd pid" >&2
      inotifyd_pid=""
    else
      sleep 1
    fi
  done
  echo "Exited main loop" >&2
}

main "\$@"
EOF

create_executable "/usr/bin/docker-compose-reload" <<EOF
#!/bin/sh
set -e

################################################################################
# Makes sure that the docker-compose service is running and up-to-date with any
# ${docker_compose_file} file.
#
# Takes down the service if the file is not readable. If the file is not ok, it
# does nothing.
#
# This script is intended to be run by the docker-compose-watchdog service.
################################################################################

docker_compose_file="${docker_compose_file}"

is_docker_compose_running() {
  systemctl is-active docker-compose --quiet
}

is_docker_compose_file_readable() {
  test -r "\${docker_compose_file}"
}

is_docker_compose_file_ok() {
  docker compose -f "\${docker_compose_file}" config --quiet
}

main() {
  if ! is_docker_compose_file_readable; then
    service docker-compose stop
    return 0
  fi

  if ! is_docker_compose_file_ok; then
    return 0
  fi

  if ! is_docker_compose_running; then
    service docker-compose start
    return 0
  fi

  service docker-compose reload
}

main "\$@"
EOF

create_file_if_not_exists "${docker_compose_file}" <<EOF
services:
  # https://containrrr.dev/watchtower/arguments/
  watchtower:
    image: docker.io/containrrr/watchtower
    environment:
      - WATCHTOWER_CLEANUP=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  # your app here
  app:
    image: docker.io/traefik/whoami
    environment:
      - PORT=80
    ports: [ "80:80" ]
#   volumes:
#     - ${appdata_dir}/data:/data:ro    # left side is inside lxc, right is inside docker
EOF

extra_commands
